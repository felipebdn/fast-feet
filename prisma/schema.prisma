generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  ADMIN
}

enum Status {
  waiting
  collected
  delivered
  returned
  availablePickup
}

model Deliveryman {
  id            String    @id @default(uuid())
  name          String
  cpf           String    @unique
  password_hash String
  role          Role
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt
  Order         Order[]

  @@map("delivery_mens")
}

model Recipient {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt

  address   Address @relation(fields: [addressId], references: [id])
  addressId String  @unique @map("address_id")
  order     Order[]

  @@map("recipients")
}

model Order {
  id             String    @id @default(uuid())
  code           String    @unique
  rotule         String
  weight         Float
  bulk           Float
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt
  status         Status
  updateAtStatus DateTime?

  recipient     Recipient    @relation(fields: [recipientId], references: [id])
  recipientId   String       @unique @map("recipient_id")
  address       Address      @relation(fields: [addressId], references: [id])
  addressId     String       @unique @map("address_id")
  delivery      Deliveryman? @relation(fields: [deliverymanId], references: [id])
  deliverymanId String?      @unique @map("delivery_id")

  @@map("orders")
}

model Address {
  id         String    @id @default(uuid())
  street     String
  complement String?
  code       String
  city       String
  state      String
  county     String
  number     Int?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt

  recipient Recipient?
  order     Order[]

  @@map("addresses")
}
